# Docker Compose for Receipt-to-Meal Planner MVP
# Unified development environment with FastAPI backend, PostgreSQL, Redis, and React Native frontend

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: receipt-planner-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: receipt_planner
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init:/docker-entrypoint-initdb.d
    networks:
      - receipt-planner-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d receipt_planner"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and job queue
  redis:
    image: redis:7-alpine
    container_name: receipt-planner-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./backend/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - receipt-planner-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: receipt-planner-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://postgres:postgres_password@postgres:5432/receipt_planner
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: receipt_planner
      DB_USER: postgres
      DB_PASSWORD: postgres_password
      
      # Redis Configuration
      REDIS_URL: redis://redis:6379/0
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # FastAPI Configuration
      FASTAPI_ENV: development
      DEBUG: "true"
      API_VERSION: v1
      SECRET_KEY: development-secret-key-change-in-production
      
      # CORS Configuration
      ALLOWED_ORIGINS: "http://localhost:3000,http://localhost:8081,http://localhost:19006"
      
      # AI/ML Services (Development placeholders)
      GOOGLE_VISION_API_KEY: ${GOOGLE_VISION_API_KEY:-your_key_here}
      GOOGLE_GEMINI_API_KEY: ${GOOGLE_GEMINI_API_KEY:-your_key_here}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-your_key_here}
      
      # File Storage
      UPLOAD_DIR: /app/uploads
      MAX_FILE_SIZE: 10485760  # 10MB
      
      # Logging
      LOG_LEVEL: INFO
      
      # Health Check
      HEALTH_CHECK_PATH: /health
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - receipt-planner-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: [
      "uvicorn", "main:app", 
      "--host", "0.0.0.0", 
      "--port", "8000", 
      "--reload",
      "--log-level", "info"
    ]

  # Celery Worker for background tasks
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: receipt-planner-celery-worker
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://postgres:postgres_password@postgres:5432/receipt_planner
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/1
      LOG_LEVEL: INFO
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    depends_on:
      - postgres
      - redis
      - backend
    networks:
      - receipt-planner-network
    command: [
      "celery", "-A", "src.core.celery_app", "worker", 
      "--loglevel=info", 
      "--concurrency=2"
    ]

  # Celery Beat for scheduled tasks
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: receipt-planner-celery-beat
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://postgres:postgres_password@postgres:5432/receipt_planner
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/1
      LOG_LEVEL: INFO
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs
    depends_on:
      - postgres
      - redis
      - backend
    networks:
      - receipt-planner-network
    command: [
      "celery", "-A", "src.core.celery_app", "beat", 
      "--loglevel=info"
    ]

  # React Native Metro bundler for frontend development
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: receipt-planner-frontend
    restart: unless-stopped
    ports:
      - "8081:8081"  # Metro bundler
      - "19000:19000"  # Expo dev tools
      - "19001:19001"  # Expo dev tools
      - "19002:19002"  # Expo dev tools
      - "19006:19006"  # Expo web
    environment:
      # React Native Configuration
      RCT_METRO_PORT: 8081
      EXPO_DEVTOOLS_LISTEN_ADDRESS: 0.0.0.0
      
      # API Configuration
      API_BASE_URL: http://backend:8000
      API_TIMEOUT: 30000
      
      # Development Settings
      NODE_ENV: development
      EXPO_DEBUG: "true"
      
      # Feature Flags
      ENABLE_ANALYTICS: "false"
      ENABLE_CRASH_REPORTING: "false"
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
      - /app/node_modules/.bin  # Preserve binaries
    working_dir: /app
    networks:
      - receipt-planner-network
    command: [
      "npm", "start", "--", 
      "--host", "0.0.0.0",
      "--port", "8081",
      "--reset-cache"
    ]

  # Nginx reverse proxy for unified access
  nginx:
    image: nginx:alpine
    container_name: receipt-planner-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - receipt-planner-network

  # PGAdmin for database management (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: receipt-planner-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@receipt-planner.local
      PGADMIN_DEFAULT_PASSWORD: admin_password
      PGADMIN_CONFIG_SERVER_MODE: "False"
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - receipt-planner-network
    profiles:
      - admin

  # Redis Commander for Redis management (optional)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: receipt-planner-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379
      HTTP_USER: admin
      HTTP_PASSWORD: admin_password
    ports:
      - "8082:8081"
    depends_on:
      - redis
    networks:
      - receipt-planner-network
    profiles:
      - admin

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local
  frontend_node_modules:
    driver: local
  pgladmin_data:
    driver: local

# Custom network for service communication
networks:
  receipt-planner-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
